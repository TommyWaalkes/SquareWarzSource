<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>alien_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_speed = 13;
breed = false;
breed_timer = 230;
alarm[1] = breed_timer + random_range(50,100); 
str = random_range(7,12); 
hp = str;
hp *= 10;
def_shoot = 1; 
def_melee = 1; 
z_res = 1; 
attack = false; 
//enemy[] = {human, zombie};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(fed){
    breed = true;
    fed = false; 
}
if(instance_number(alien)&lt;max_pop){
         a = instance_create(x,y, alien);
        with(a){
             if(other.buffed){
                buffed = true;
            }
            str = other.str + random_range(-3,3); 
             if(other.mutate_child){
                stop_chance = other.stop_chance * random_range(.7, 1.6);
                breed_chance = other.breed_chance * random_range(.7, 1.6);
                attack_chance = other.attack_chance * random_range(.7, 1.6);
                forage_chance = other.forage_chance * random_range(.7, 1.6);
            }
            else{
            
                stop_chance = other.stop_chance * random_range(.9, 1.1);
                breed_chance = other.breed_chance * random_range(.9, 1.1);
                attack_chance = other.attack_chance * random_range(.9, 1.1);
                forage_chance = other.forage_chance * random_range(.9, 1.1);
            }
        }
   /*    b = instance_create(x,y, alien);
        with(b){
             if(other.buffed){
                buffed = true;
            }
            str = other.str + random_range(-3,3); 
             if(other.mutate_child){
                stop_chance = other.stop_chance * random_range(.7, 1.6);
                breed_chance = other.breed_chance * random_range(.7, 1.6);
                attack_chance = other.attack_chance * random_range(.7, 1.6);
                forage_chance = other.forage_chance * random_range(.7, 1.6);
            }
            else{
            
                stop_chance = other.stop_chance * random_range(.9, 1.1);
                breed_chance = other.breed_chance * random_range(.9, 1.1);
                attack_chance = other.attack_chance * random_range(.9, 1.1);
                forage_chance = other.forage_chance * random_range(.9, 1.1);
            }
        }*/

    }
 
alarm[1] = breed_timer + random_range(50,100); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  
    chances[0] = stop_chance;
    chances[1] = attack_chance + stop_chance;
    chances[2] = breed_chance + stop_chance + attack_chance;
    chances[3] = breed_chance + stop_chance + attack_chance + forage_chance;
    attack = false; 
    total = chances[0] + chances[1] + chances[2]; 
   r = random_range(0, total);  
 
   if(chances[0] &gt; r){ 
    //stop
    speed = 0;
    alarm[9] = random_range(10, 30);
   }
   else if(chances[1] &gt; r &amp;&amp; r &gt;= chances[0]  ){
    //attack! 
    if(instance_exists(human) || instance_exists(zombie)){
           my_name = object_get_name(object_index);
           
           for(i = 0; i &lt; instance_number(unit); i++){
           
                target = instance_find(unit, i);
                enemy_name = object_get_name(target.object_index);
                dist = point_distance(x, y, target.x, target.y); 
                clear_line = collision_line(x, y, target.x, target.y, wall, false, true);
                 if(my_name == enemy_name)||(dist&gt;300){
                    direction = random_range(0,360);
                    continue; 
                 }
                 else if(!clear_line){
                    direction = random_range(0,360);
                    continue; 
                 }
                 else{
                    //direction = point_direction(x, y, target.x, target.y);
                    attack = true; 
                    break;
                 }
           }     
    }
        else{
            direction = random_range(0,360);
        }
        speed = move_speed;
   }
   else if(chances[2] &gt; r &amp;&amp; r &gt;= chances[1]){
   //breed
     speed = move_speed;
     if(life_span &gt; 1080){

            breed = true;
     
                mate = instance_nearest(x,y,alien);
                mate_id = mate.id; 
                if(mate.breed){
                    direction = point_direction(x, y, mate.x, mate.y);   
                }
                else{
                    direction = random_range(0,360);
                    speed = move_speed;
                }        
        }
        else{
            direction = random_range(0,360);
            speed = move_speed;
        }
   }
   else if (chances[3] &gt; r &amp;&amp; r &gt;= chances[2]){
        if(instance_exists(food)){
            f = instance_nearest(x, y, food);
            direction = point_direction(x, y, f.x, f.y); 
            speed = move_speed;
        }
        else{
            direction = random_range(0,360);
            speed = move_speed;
        }
   }
   else{
        direction = random_range(0,360);
        speed = move_speed;
   }
   
     alarm[0] = 30 + random_range(0,40);

/*rando = random_range(0,10);
speed = move_speed;
if(rando&gt;5){
    if(instance_exists(human)){
        h = instance_nearest(x,y,human);
        
        direction =point_direction(x,y,h.x,h.y);
    }
    else{
        direction = random_range(0,360);
    }
    
}
else{
    direction = random_range(0,360);
}

alarm[0]= 60 +random_range(10,100);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mate = instance_nearest(x,y,alien);

if(breed){
    if(mate.fitness&gt; fitness){
        direction = point_direction(x,y,mate.x, mate.y); 
    } else if(object_exists(global.fitest_alien)) { 
        mate = global.fitest_alien; 
        direction = point_direction(x,y,mate.x, mate.y);
    }
}

if(attack &amp;&amp; (instance_exists(alien)|| instance_exists(human) )){
           for(i = 0; i &lt; instance_number(unit); i++){
           
                target = instance_find(unit, i);
                enemy_name = object_get_name(target.object_index);
                dist = point_distance(x, y, target.x, target.y); 
                
                 if(my_name == enemy_name)||(dist&gt;500){
                    direction = random_range(0,360);
                    continue; 
                 }
                 else{
                    //direction = point_direction(x, y, target.x, target.y);
                    mp_potential_step(target.x, target.y, move_speed, false);
                    break;
                 }
           }
    
}

if(image_xscale &lt; growth_max){
    image_xscale += growth_rate;
    image_yscale += growth_rate;
    str += .05;
    if(buffed){
        image_xscale += growth_rate * 5;
        image_yscale += growth_rate * 5;
    }
     
    move_speed += .02
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="alien">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_number(alien)&lt;max_pop){
    if(breed){
       
        child_str = (str + other.str)/2 * random_range(.9, 1.1); 
        if(mutate_child){
            child_str = random_range(.8, 1.3); 
        }
        
        breed = false;
         a = instance_create(x,y, alien);
        with(a){
            if(other.buffed){
                buffed = true;
            }
        
            str = other.child_str * random_range(.9,1.2) + 1; 
            melee = other.melee + random_range(-3,3); 
            xx = x + random_range(-40,40);   
            yy = y + random_range(-40,40);
            
            if(position_empty(xx , yy )){
                x = xx;
                y = yy; 
            }
            
             if(other.mutate_child){
                stop_chance = other.stop_chance * random_range(.7, 1.6);
                breed_chance = other.breed_chance * random_range(.7, 1.6);
                attack_chance = other.attack_chance * random_range(.7, 1.6);
                forage_chance = other.forage_chance * random_range(.7, 1.6);
            }
            else{
            
                stop_chance = other.stop_chance * random_range(.9, 1.1);
                breed_chance = other.breed_chance * random_range(.9, 1.1);
                attack_chance = other.attack_chance * random_range(.9, 1.1);
                forage_chance = other.forage_chance * random_range(.9, 1.1);
            }
            
        }
           b = instance_create(x,y, alien);
        with(b){
             if(other.buffed){
                buffed = true;
            }
        
            str = other.child_str * random_range(.9,1.1) +1; 
            melee = other.melee + random_range(-3,3); 
            xx = x + random_range(-40,40);   
            yy = y + random_range(-40,40);
            
            if(!place_meeting(xx , yy, wall)){
                x = xx;
                y = yy; 
            }
            
             if(other.mutate_child){
                stop_chance = other.stop_chance * random_range(.7, 1.6);
                breed_chance = other.breed_chance * random_range(.7, 1.6);
                attack_chance = other.attack_chance * random_range(.7, 1.6);
                forage_chance = other.forage_chance * random_range(.7, 1.6);
            }
            else{
            
                stop_chance = other.stop_chance * random_range(.9, 1.1);
                breed_chance = other.breed_chance * random_range(.9, 1.1);
                attack_chance = other.attack_chance * random_range(.9, 1.1);
                forage_chance = other.forage_chance * random_range(.9, 1.1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="unit">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fed = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
