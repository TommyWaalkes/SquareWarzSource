<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>wolf_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fed = false; 
friendly_chance = 5; 

r = random_range(0,10);

if(r &gt;=friendly_chance){
    friendly = true; 
}
else{ 
    friendly = false; 
}
move_speed = 9;
str += random_range(2,7); 
growth_max = 1 + .1 * str;

hp = str + 10; 

hp *= 10; 
breed = false; 

breed_timer = 100 + random_range(-10, 10);
alarm[2] = breed_timer; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(fed){
    breed = true; 
    fed = false; 
}
alarm[2] = breed_timer + random_range(-50,100); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    
    chances[0] = stop_chance;
    chances[1] = attack_chance + stop_chance;
    chances[2] = breed_chance + stop_chance + attack_chance;
    chances[3] = breed_chance + stop_chance + attack_chance + forage_chance;
    
    total = chances[0] + chances[1] + chances[2]; 
   r = random_range(0, total);  
 
   if(chances[0] &gt; r){ 
    //stop
    speed = 0;
    alarm[9] = random_range(10, 30);
   }
   else if(chances[1] &gt; r &amp;&amp; r &gt;= chances[0]  ){
    //attack! 
    if(instance_exists(alien) || instance_exists(zombie) || instance_exists(human)){
           my_name = object_get_name(object_index);
           
           for(i = 0; i &lt; instance_number(unit); i++){
           
                target = instance_find(unit, i);
                enemy_name = object_get_name(target.object_index);
                dist = point_distance(x, y, target.x, target.y); 
                
                 if(my_name == enemy_name)||(dist&gt;300){
                    direction = random_range(0,360);
                    continue; 
                 }
                 else{
                    direction = -point_direction(x, y, target.x, target.y); 
                    break;
                 }
           }     
    }
        else{
            direction = random_range(0,360);
        }
        speed = move_speed;
   }
   else if(chances[2] &gt; r &amp;&amp; r &gt;= chances[1]){
   //breed
     speed = move_speed;
     if(life_span &gt; 1080){

            breed = true;
     
                mate = instance_nearest(x,y,wolf);
                mate_id = mate.id; 
                if(mate.breed){
                    direction = point_direction(x, y, mate.x, mate.y);   
                }
                else{
                    direction = random_range(0,360);
                    speed = move_speed;
                }        
        }
        else{
            direction = random_range(0,360);
            speed = move_speed;
        }
   }
   else if (chances[3] &gt; r &amp;&amp; r &gt;= chances[2]){
        if(instance_exists(food)){
            f = instance_nearest(x, y, food);
            direction = point_direction(x, y, f.x, f.y); 
            speed = move_speed;
        }
        else{
            direction = random_range(0,360);
            speed = move_speed;
        }
   }
   else{
        direction = random_range(0,360);
        speed = move_speed;
   }

   
     alarm[0] = 30 + random_range(0,40);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="wolf">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>r  = random_range(1,3);



if(instance_number(wolf)&lt;max_pop){
    if(breed){
        breed = false;
        repeat(r){
         a = instance_create(x,y, wolf);
         
         child_str = (str + other.str) / 1.5;
         child_friendly = (friendly_chance + other.friendly_chance) /2; 
         
         if(friendly &amp;&amp; other.friendly){
            tame_child = true; 
         }
         else{
            tame_child = false; 
         }
         if(mutate_child){
            child_str *= random_range(.5, 1.5); 
         }
         
         with(a){
            friendly_chance = other.child_friendly + random_range(-1, 1); 
            
            if(other.tame_child){
                friendly = true; 
            }
            str += other.child_str + random_range(-1,1); 
            //path_z = other.path_z * random_range(-1.1, 1.1);
           // path_a = other.path_a * random_range(-1.1, 1.1);
            
            if(other.buffed){
                buffed = true; 
            }
            
            if(other.mutate_child){
                stop_chance = other.stop_chance * random_range(.7, 1.6);
                breed_chance = other.breed_chance * random_range(.7, 1.6);
                attack_chance = other.attack_chance * random_range(.7, 1.6);
                forage_chance = other.forage_chance * random_range(.7, 1.6);
            }
            else{
            
                stop_chance = other.stop_chance * random_range(.9, 1.1);
                breed_chance = other.breed_chance * random_range(.9, 1.1);
                attack_chance = other.attack_chance * random_range(.9, 1.1);
                forage_chance = other.forage_chance * random_range(.9, 1.1);
            }
            xx = x + random_range(-40,40);   
            yy = y + random_range(-40,40);
            
            if(!place_meeting(xx , yy, wall)){
                x = xx;
                y = yy; 
            }
         }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="food">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if(friendly){
    image_blend = make_colour_hsv(255, 100,100);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
