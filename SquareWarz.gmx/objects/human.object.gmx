<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>human_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//enemy[] = {alien, zombie};
reload = 35; 
breed = false;
breed_timer = 200 + random_range(-50, 50);

shoot = 1; 


alarm[1] = reload; 
alarm[2] = breed_timer; 
str += random_range(2,3); 
hp = 2+str; 
hp *= 10;
path_z = random_range(1 , 0)*360;
path_a = random_range(1 , 0)*360;
z_near = false;


growth_max = 1.5 * random_range(.8, 1.3);
growth_rate = .001; 

mate_id = -1; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>breed = true; 

alarm[2] = breed_timer + random_range(-50,100); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
dist_a = 99000;
dist_b = 99000; 
 
if(instance_exists(unit)){
    my_name = object_get_name(object_index);
    for(i = 0; i &lt; instance_number(unit); i++){
       
       target = instance_find(unit, i);
       enemy_name = object_get_name(target.object_index);
       dist = point_distance(x, y, target.x, target.y);
       
       if(my_name == enemy_name)||(dist&gt;400){
        continue; 
       }
       else{
            if !(collision_line(x, y, target.x, target.y, wall, false, true)){
            b = instance_create(x,y,bullet); 
            with(b){
                t = other.target
                direction = point_direction(x, y, t.x, t.y); 
                damage = other.str + other.shoot + 1;
                }
            } 
            break;
        }
    }    
}
/*

if(instance_exists(alien)){
    ex = instance_nearest(x, y, alien).x;
    ey = instance_nearest(x, y, alien).y;
    dist_a = point_distance(x,y,ex,ey); 
}

if(instance_exists(zombie)){
    ex = instance_nearest(x,y,zombie).x;
    ey = instance_nearest(x,y,zombie).y;
    dist_b = point_distance(x,y,ex,ey); 
}

if(dist_b&lt;dist_a){
    target = instance_nearest(x,y,alien);
    ux = target.x;
    uy = target.y;
}
else{
    target = instance_nearest(x,y, zombie);
    ux = target.x;
    uy = target.y;
}


if !(collision_line(x, y, ux, uy, wall, false, true)){
    with(b){
        direction = point_direction(x, y, target.x, target.y); 
        damage = other.str + 1;
    }
}

if(dist_b&lt;dist_a){
    with(b){
        if(instance_exists(zombie)){
            z = instance_nearest(x,y,zombie);
           //cl = collision_line(x, y, z.x, z.y, wall, false, true); 
           
            direction = point_direction(x, y, z.x, z.y);
            damage = other.str + 1; 
        }
    }
}else{
    with(b){
        if(instance_exists(alien)){
            z = instance_nearest(x,y,alien);
            direction = point_direction(x, y, z.x, z.y);
            damage = other.str + 1; 
        }
    }
}

*/

alarm[1] = reload + random_range(-10,10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  if(z_near){
    direction = path_z; 
  }else{
    
    chances[0] = stop_chance;
    chances[1] = attack_chance + stop_chance;
    chances[2] = breed_chance + stop_chance + attack_chance;
    chances[3] = breed_chance + stop_chance + attack_chance + forage_chance;
    
    total = chances[0] + chances[1] + chances[2]; 
   r = random_range(0, total);  
 
   if(chances[0] &gt; r){ 
    //stop
    speed = 0;
    alarm[9] = random_range(10, 30);
   }
   else if(chances[1] &gt; r &amp;&amp; r &gt;= chances[0]  ){
    //attack! 
    if(instance_exists(alien) || instance_exists(zombie)){
           my_name = object_get_name(object_index);
           
           for(i = 0; i &lt; instance_number(unit); i++){
           
                target = instance_find(unit, i);
                enemy_name = object_get_name(target.object_index);
                dist = point_distance(x, y, target.x, target.y); 
                
                 if(my_name == enemy_name)||(dist&gt;300){
                    direction = random_range(0,360);
                    continue; 
                 }
                 else{
                    direction = -point_direction(x, y, target.x, target.y); 
                    break;
                 }
           }     
    }
        else{
            direction = random_range(0,360);
        }
        speed = move_speed;
   }
   else if(chances[2] &gt; r &amp;&amp; r &gt;= chances[1]){
   //breed
     speed = move_speed;
     if(life_span &gt; 1080){

            breed = true;
     
                mate = instance_nearest(x,y,human);
                mate_id = mate.id; 
                if(mate.breed){
                    direction = point_direction(x, y, mate.x, mate.y);   
                }
                else{
                    direction = random_range(0,360);
                    speed = move_speed;
                }        
        }
        else{
            direction = random_range(0,360);
            speed = move_speed;
        }
   }
   else if (chances[3] &gt; r &amp;&amp; r &gt;= chances[2]){
        if(instance_exists(food)){
            f = instance_nearest(x, y, food);
            direction = point_direction(x, y, f.x, f.y); 
            speed = move_speed;
        }
        else{
            direction = random_range(0,360);
            speed = move_speed;
        }
   }
   else{
        direction = random_range(0,360);
        speed = move_speed;
   }
}
   
     alarm[0] = 30 + random_range(0,40);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fitness++;
//if(breed &amp;&amp; instance_exists(mate_id)){
//    if(mate.breed &amp;&amp; mate.fitness&gt; fitness){
  //       move_towards_point( mate.x, mate.y, move_speed); 
 //   }
//}

if(breed){
    h = instance_nearest(x, y, human); 
    //move_towards_point( h.x, h.y, move_speed); 
}

if(image_xscale &lt; growth_max){
    image_xscale += growth_rate;
    image_yscale += growth_rate;
    str += .01
}


if(instance_exists(alien)){
    enemy_a = instance_nearest(x,y, alien); 
    if(point_distance(x,y, enemy_a.x, enemy_a.y) &lt; 300){
        a_near = true;
    }
    else{
        a_near = false;
    }

}




if(instance_exists(zombie)){
    enemy_z = instance_nearest(x,y, zombie);
    if(point_distance(x, y, enemy_z.x, enemy_z.y) &lt; 300){
        z_near = true;
    }
    else{
        z_near = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="human">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_number(human)&lt;max_pop){
    if(breed){
        breed = false;
         a = instance_create(x,y, human);
         
         child_str = (str + other.str) / 2;
         if(mutate_child){
            child_str *= random_range(.5, 1.5); 
         }
         
         with(a){
            str += other.child_str + random_range(-1,1); 
            path_z = other.path_z * random_range(-1.1, 1.1);
            path_a = other.path_a * random_range(-1.1, 1.1);
            
            if(other.buffed){
                buffed = true; 
            }
            
            if(other.mutate_child){
                stop_chance = other.stop_chance * random_range(.7, 1.6);
                breed_chance = other.breed_chance * random_range(.7, 1.6);
                attack_chance = other.attack_chance * random_range(.7, 1.6);
                forage_chance = other.forage_chance * random_range(.7, 1.6);
            }
            else{
            
                stop_chance = other.stop_chance * random_range(.9, 1.1);
                breed_chance = other.breed_chance * random_range(.9, 1.1);
                attack_chance = other.attack_chance * random_range(.9, 1.1);
                forage_chance = other.forage_chance * random_range(.9, 1.1);
            }
            xx = x + random_range(-40,40);   
            yy = y + random_range(-40,40);
            
            if(!place_meeting(xx , yy, wall)){
                x = xx;
                y = yy; 
            }
            
            r = random_range(0,10);            
            
            if(r&lt;5){
                melee += random_range(0,1);    
            }else{
                shoot += random_range(0,1);  
            }
            
         }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

my_name = object_get_name(object_index);
draw_set_colour(c_black); 
//draw_text(x, y, my_name);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
